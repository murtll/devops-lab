name: Build and deploy

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    outputs:
      image_name: ${{ steps.envs.outputs.image_name }}
      image_tag: ${{ steps.envs.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v2

      - run: |
          echo image_name=${GITHUB_REPOSITORY##*/} >> $GITHUB_OUTPUT
          echo image_tag=$(echo $GITHUB_SHA | cut -c 1-8) >> $GITHUB_OUTPUT
        id: envs

      - name: Build and push image
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build . \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.envs.outputs.image_name }}:${{ steps.envs.outputs.image_tag }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.envs.outputs.image_name }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.envs.outputs.image_name }}:${{ steps.envs.outputs.image_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.envs.outputs.image_name }}:latest

      - name: Failure notify
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ ${{ github.actor }} pushed changes and job ${{ github.job }} failed.
            see workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
   
  test:
    name: Test
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Run pytest
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }} pytest

      - name: Failure notify
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ ${{ github.actor }} pushed changes and job ${{ github.job }} failed.
            see workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  trivy:
    name: Scan image with Trivy
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
          format: sarif
          output: trivy.sarif
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/code-scanning/sarifs \
            -d "{\"commit_sha\":\"${{ github.sha }}\",\"ref\":\"${{ github.ref }}\",\"sarif\":\"$(gzip -c trivy.sarif | base64 -w0)\"}"
      
      - name: Failure notify
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ ${{ github.actor }} pushed changes and job ${{ github.job }} failed.
            see workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    environment:
      name: master
      url: https://1132359-co62359.tw1.ru/
    needs:
      - test
      - build
    steps:
      - uses: actions/checkout@v2

      - name: Install Ansible
        run: |
          sudo apt-add-repository ppa:ansible/ansible
          sudo apt update
          sudo apt install ansible

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Run ansible playbook
        run: |
          ansible-playbook --private-key '~/.ssh/deploy_key' --ssh-common-args '-o StrictHostKeyChecking=no' -i ansible/inventory.yml ansible/playbooks/install-docker.yml
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER: ${{ secrets.SERVER }}

      - name: Configure docker-compose.yml
        run: |
          docker compose config > docker-compose.configured.yml
        env:
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
          WEB_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build.outputs.image_name }}
          WEB_IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}

      - name: Install jq
        run: |
          sudo apt update -y && sudo apt install -y jq

      - name: Deploy
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER }} "mkdir -p ${{ github.repository }}"
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no docker-compose.configured.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER }}:${{ github.repository }}/docker-compose.yml
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER }} "cd ${{ github.repository }} && docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} && docker compose pull && docker compose up -d"
          sleep 5
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER }} "cd ${{ github.repository }} && docker compose exec web bash -c 'python manage.py migrate'"
#          CONTAINER_STATUS=$(ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER }} "cd ${{ github.repository }} && docker compose ps | grep web | awk '{ print \$1 }' | xargs docker inspect" | jq -r .[].State.Health.Status)
#          if [[ "$CONTAINER_STATUS" != "healthy" ]]; then 
#            
#          else

      - name: Success notify
        if: ${{ success() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ ${{ github.actor }} pushed changes and job ${{ github.job }} succeed.
            see workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Failure notify
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ ${{ github.actor }} pushed changes and job ${{ github.job }} failed.
            see workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Cleanup images
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER }} "docker image prune -af"
        continue-on-error: true